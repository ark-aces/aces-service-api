/* 
 * Aces Service API
 *
 * API Specification for Aces Services for blockchain interoperability. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArkAces.ServiceClient.Client.SwaggerDateConverter;

namespace ArkAces.ServiceClient.Model
{
    /// <summary>
    /// Capacity
    /// </summary>
    [DataContract]
    public partial class Capacity :  IEquatable<Capacity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Capacity" /> class.
        /// </summary>
        /// <param name="Value">The capacity value..</param>
        /// <param name="Unit">The unit type of given capacity, i.e. \&quot;ETH\&quot;..</param>
        /// <param name="DisplayValue">The formatted display value of the capacity, i.e. \&quot;250.00 ETH\&quot;.</param>
        public Capacity(decimal? Value = default(decimal?), string Unit = default(string), string DisplayValue = default(string))
        {
            this.Value = Value;
            this.Unit = Unit;
            this.DisplayValue = DisplayValue;
        }
        
        /// <summary>
        /// The capacity value.
        /// </summary>
        /// <value>The capacity value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// The unit type of given capacity, i.e. \&quot;ETH\&quot;.
        /// </summary>
        /// <value>The unit type of given capacity, i.e. \&quot;ETH\&quot;.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// The formatted display value of the capacity, i.e. \&quot;250.00 ETH\&quot;
        /// </summary>
        /// <value>The formatted display value of the capacity, i.e. \&quot;250.00 ETH\&quot;</value>
        [DataMember(Name="displayValue", EmitDefaultValue=false)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Capacity {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Capacity);
        }

        /// <summary>
        /// Returns true if Capacity instances are equal
        /// </summary>
        /// <param name="input">Instance of Capacity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Capacity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.DisplayValue == input.DisplayValue ||
                    (this.DisplayValue != null &&
                    this.DisplayValue.Equals(input.DisplayValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.DisplayValue != null)
                    hashCode = hashCode * 59 + this.DisplayValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
