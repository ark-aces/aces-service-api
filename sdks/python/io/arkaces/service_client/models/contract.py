# coding: utf-8

"""
    Aces Service API

    API Specification for Aces Services for blockchain interoperability. 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Contract(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'expires_at': 'datetime',
        'correlation_id': 'str',
        'status': 'str',
        'results': 'list[Result]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'expires_at': 'expires_at',
        'correlation_id': 'correlationId',
        'status': 'status',
        'results': 'results'
    }

    def __init__(self, id=None, created_at=None, expires_at=None, correlation_id=None, status=None, results=None):
        """
        Contract - a model defined in Swagger
        """

        self._id = None
        self._created_at = None
        self._expires_at = None
        self._correlation_id = None
        self._status = None
        self._results = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if created_at is not None:
          self.created_at = created_at
        if expires_at is not None:
          self.expires_at = expires_at
        if correlation_id is not None:
          self.correlation_id = correlation_id
        if status is not None:
          self.status = status
        if results is not None:
          self.results = results

    @property
    def id(self):
        """
        Gets the id of this Contract.
        The globally unique Contract ID.

        :return: The id of this Contract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Contract.
        The globally unique Contract ID.

        :param id: The id of this Contract.
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Contract.
        Date the Contract was created.

        :return: The created_at of this Contract.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Contract.
        Date the Contract was created.

        :param created_at: The created_at of this Contract.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """
        Gets the expires_at of this Contract.
        Date the Contract will expire. Any expired contracts will no longer attempt execution.

        :return: The expires_at of this Contract.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this Contract.
        Date the Contract will expire. Any expired contracts will no longer attempt execution.

        :param expires_at: The expires_at of this Contract.
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def correlation_id(self):
        """
        Gets the correlation_id of this Contract.
        Requestor generated globally unique identifier for correleating requests.

        :return: The correlation_id of this Contract.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """
        Sets the correlation_id of this Contract.
        Requestor generated globally unique identifier for correleating requests.

        :param correlation_id: The correlation_id of this Contract.
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def status(self):
        """
        Gets the status of this Contract.

        :return: The status of this Contract.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Contract.

        :param status: The status of this Contract.
        :type: str
        """
        allowed_values = ["new", "pendingPayment", "rejected", "expired", "executed", "failed"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def results(self):
        """
        Gets the results of this Contract.

        :return: The results of this Contract.
        :rtype: list[Result]
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this Contract.

        :param results: The results of this Contract.
        :type: list[Result]
        """

        self._results = results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Contract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
