/**
 * Aces Service API
 * API Specification for Aces Services for blockchain interoperability. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Contract from '../model/Contract';
import ContractRequest from '../model/ContractRequest';
import Health from '../model/Health';
import Info from '../model/Info';
import NotFoundError from '../model/NotFoundError';
import ValidationError from '../model/ValidationError';

/**
* AcesService service.
* @module arkaces-service-client/AcesServiceApi
* @version 1.0.0
*/
export default class AcesServiceApi {

    /**
    * Constructs a new AcesServiceApi. 
    * @alias module:arkaces-service-client/AcesServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contractsIdGet operation.
     * @callback module:arkaces-service-client/AcesServiceApi~contractsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service Contract.
     * Gets service contract info for a contract.
     * @param {String} id Contract identifier.
     * @param {module:arkaces-service-client/AcesServiceApi~contractsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contract}
     */
    contractsIdGet(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contractsIdGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contract;

      return this.apiClient.callApi(
        '/contracts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contractsPost operation.
     * @callback module:arkaces-service-client/AcesServiceApi~contractsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Service Contract
     * Creates a new service contract.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContractRequest} opts.contractRequest The request to create a new contract.
     * @param {module:arkaces-service-client/AcesServiceApi~contractsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contract}
     */
    contractsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['contractRequest'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contract;

      return this.apiClient.callApi(
        '/contracts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the healthGet operation.
     * @callback module:arkaces-service-client/AcesServiceApi~healthGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Health} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Health of node.
     * Get application health information.
     * @param {module:arkaces-service-client/AcesServiceApi~healthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Health}
     */
    healthGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Health;

      return this.apiClient.callApi(
        '/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rootGet operation.
     * @callback module:arkaces-service-client/AcesServiceApi~rootGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Info} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service Info.
     * Gets Service Info object.
     * @param {module:arkaces-service-client/AcesServiceApi~rootGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Info}
     */
    rootGet(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Info;

      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
