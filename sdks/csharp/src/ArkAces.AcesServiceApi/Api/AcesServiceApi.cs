/* 
 * Aces Service API
 *
 * API Specification for Aces Services for blockchain interoperability. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ArkAces.AcesServiceApi.Client;
using ArkAces.AcesServiceApi.Model;

namespace ArkAces.AcesServiceApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAcesServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Service Contract.
        /// </summary>
        /// <remarks>
        /// Gets service contract info for a contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>Contract</returns>
        Contract ContractsIdGet (string id);

        /// <summary>
        /// Get Service Contract.
        /// </summary>
        /// <remarks>
        /// Gets service contract info for a contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Create Service Contract
        /// </summary>
        /// <remarks>
        /// Creates a new service contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>Contract</returns>
        Contract ContractsPost (ContractRequest contractRequest = null);

        /// <summary>
        /// Create Service Contract
        /// </summary>
        /// <remarks>
        /// Creates a new service contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractsPostWithHttpInfo (ContractRequest contractRequest = null);
        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Health</returns>
        Health HealthGet ();

        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Health</returns>
        ApiResponse<Health> HealthGetWithHttpInfo ();
        /// <summary>
        /// Get Service Info.
        /// </summary>
        /// <remarks>
        /// Gets Service Info object.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Info</returns>
        Info RootGet ();

        /// <summary>
        /// Get Service Info.
        /// </summary>
        /// <remarks>
        /// Gets Service Info object.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> RootGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Service Contract.
        /// </summary>
        /// <remarks>
        /// Gets service contract info for a contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractsIdGetAsync (string id);

        /// <summary>
        /// Get Service Contract.
        /// </summary>
        /// <remarks>
        /// Gets service contract info for a contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create Service Contract
        /// </summary>
        /// <remarks>
        /// Creates a new service contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractsPostAsync (ContractRequest contractRequest = null);

        /// <summary>
        /// Create Service Contract
        /// </summary>
        /// <remarks>
        /// Creates a new service contract.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsPostAsyncWithHttpInfo (ContractRequest contractRequest = null);
        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Health</returns>
        System.Threading.Tasks.Task<Health> HealthGetAsync ();

        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Health)</returns>
        System.Threading.Tasks.Task<ApiResponse<Health>> HealthGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get Service Info.
        /// </summary>
        /// <remarks>
        /// Gets Service Info object.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> RootGetAsync ();

        /// <summary>
        /// Get Service Info.
        /// </summary>
        /// <remarks>
        /// Gets Service Info object.
        /// </remarks>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> RootGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AcesServiceApi : IAcesServiceApi
    {
        private ArkAces.AcesServiceApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AcesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AcesServiceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = ArkAces.AcesServiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AcesServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AcesServiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ArkAces.AcesServiceApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArkAces.AcesServiceApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Service Contract. Gets service contract info for a contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>Contract</returns>
        public Contract ContractsIdGet (string id)
        {
             ApiResponse<Contract> localVarResponse = ContractsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Contract. Gets service contract info for a contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > ContractsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesServiceApi->ContractsIdGet");

            var localVarPath = "/contracts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Get Service Contract. Gets service contract info for a contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractsIdGetAsync (string id)
        {
             ApiResponse<Contract> localVarResponse = await ContractsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Service Contract. Gets service contract info for a contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contract identifier.</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesServiceApi->ContractsIdGet");

            var localVarPath = "/contracts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Create Service Contract Creates a new service contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>Contract</returns>
        public Contract ContractsPost (ContractRequest contractRequest = null)
        {
             ApiResponse<Contract> localVarResponse = ContractsPostWithHttpInfo(contractRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Service Contract Creates a new service contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse< Contract > ContractsPostWithHttpInfo (ContractRequest contractRequest = null)
        {

            var localVarPath = "/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractRequest != null && contractRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contractRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Create Service Contract Creates a new service contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractsPostAsync (ContractRequest contractRequest = null)
        {
             ApiResponse<Contract> localVarResponse = await ContractsPostAsyncWithHttpInfo(contractRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Service Contract Creates a new service contract.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractRequest">The request to create a new contract. (optional)</param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsPostAsyncWithHttpInfo (ContractRequest contractRequest = null)
        {

            var localVarPath = "/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractRequest != null && contractRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contractRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Health</returns>
        public Health HealthGet ()
        {
             ApiResponse<Health> localVarResponse = HealthGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Health</returns>
        public ApiResponse< Health > HealthGetWithHttpInfo ()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Health>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Health) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Health)));
        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Health</returns>
        public async System.Threading.Tasks.Task<Health> HealthGetAsync ()
        {
             ApiResponse<Health> localVarResponse = await HealthGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Health)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Health>> HealthGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Health>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Health) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Health)));
        }

        /// <summary>
        /// Get Service Info. Gets Service Info object.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Info</returns>
        public Info RootGet ()
        {
             ApiResponse<Info> localVarResponse = RootGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Info. Gets Service Info object.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Info</returns>
        public ApiResponse< Info > RootGetWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Info>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Info) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Info)));
        }

        /// <summary>
        /// Get Service Info. Gets Service Info object.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> RootGetAsync ()
        {
             ApiResponse<Info> localVarResponse = await RootGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Service Info. Gets Service Info object.
        /// </summary>
        /// <exception cref="ArkAces.AcesServiceApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Info>> RootGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Info>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Info) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Info)));
        }

    }
}
