# coding: utf-8

"""
    Aces Service API

    API Specification for Aces Services for blockchain interoperability. 

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Info(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'instructions': 'str',
        'capacities': 'list[Capacity]',
        'flat_fee': 'str',
        'contract_schema': 'object',
        'features': 'list[Feature]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'instructions': 'instructions',
        'capacities': 'capacities',
        'flat_fee': 'flatFee',
        'contract_schema': 'contractSchema',
        'features': 'features'
    }

    def __init__(self, name=None, description=None, instructions=None, capacities=None, flat_fee=None, contract_schema=None, features=None):
        """
        Info - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._instructions = None
        self._capacities = None
        self._flat_fee = None
        self._contract_schema = None
        self._features = None
        self.discriminator = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if instructions is not None:
          self.instructions = instructions
        if capacities is not None:
          self.capacities = capacities
        if flat_fee is not None:
          self.flat_fee = flat_fee
        if contract_schema is not None:
          self.contract_schema = contract_schema
        if features is not None:
          self.features = features

    @property
    def name(self):
        """
        Gets the name of this Info.
        Name of the contract service.

        :return: The name of this Info.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Info.
        Name of the contract service.

        :param name: The name of this Info.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Info.
        Description of the contract service.

        :return: The description of this Info.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Info.
        Description of the contract service.

        :param description: The description of this Info.
        :type: str
        """

        self._description = description

    @property
    def instructions(self):
        """
        Gets the instructions of this Info.
        Service usage instructions in markdown format.

        :return: The instructions of this Info.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """
        Sets the instructions of this Info.
        Service usage instructions in markdown format.

        :param instructions: The instructions of this Info.
        :type: str
        """

        self._instructions = instructions

    @property
    def capacities(self):
        """
        Gets the capacities of this Info.

        :return: The capacities of this Info.
        :rtype: list[Capacity]
        """
        return self._capacities

    @capacities.setter
    def capacities(self, capacities):
        """
        Sets the capacities of this Info.

        :param capacities: The capacities of this Info.
        :type: list[Capacity]
        """

        self._capacities = capacities

    @property
    def flat_fee(self):
        """
        Gets the flat_fee of this Info.

        :return: The flat_fee of this Info.
        :rtype: str
        """
        return self._flat_fee

    @flat_fee.setter
    def flat_fee(self, flat_fee):
        """
        Sets the flat_fee of this Info.

        :param flat_fee: The flat_fee of this Info.
        :type: str
        """

        self._flat_fee = flat_fee

    @property
    def contract_schema(self):
        """
        Gets the contract_schema of this Info.
        Contract input schema in JSON Schema format.

        :return: The contract_schema of this Info.
        :rtype: object
        """
        return self._contract_schema

    @contract_schema.setter
    def contract_schema(self, contract_schema):
        """
        Sets the contract_schema of this Info.
        Contract input schema in JSON Schema format.

        :param contract_schema: The contract_schema of this Info.
        :type: object
        """

        self._contract_schema = contract_schema

    @property
    def features(self):
        """
        Gets the features of this Info.

        :return: The features of this Info.
        :rtype: list[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """
        Sets the features of this Info.

        :param features: The features of this Info.
        :type: list[Feature]
        """

        self._features = features

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Info):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
